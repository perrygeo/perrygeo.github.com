wget http://download.geonames.org/export/dump/allCountries.zip
unzip allCountries.zip
wget http://download.geonames.org/export/dump/countryInfo.txt
wget http://download.geonames.org/export/dump/alternateNames.zip
unzip alternateNames.zip


drop table geoname;
create table geoname (
         geonameid       int,
         name            varchar(200),
         asciiname        varchar(200),
         alternatenames  text,
         latitude        float,
         longitude       float,
         fclass  char(1),
         fcode   varchar(10),
         country varchar(2),
         cc2 varchar(60),
         admin1  varchar(20),
         admin2  varchar(80),
         admin3  varchar(20),
         admin4  varchar(20),
         population      bigint,
         elevation       int,
         gtopo30         int,
         timezone varchar(40),
         moddate         date
 );
 
drop table alternatename ;
create table alternatename (
         alternatenameId  int,
         geonameid          int,
         isoLanguage        varchar(7),
         alternateName     varchar(200),
         isPreferredName      boolean,
         isShortName    boolean,
         isColloquial   boolean,
         isHistoric boolean
 );
 
set client_encoding to 'UTF-8';


COPY geoname
(geonameid,name,asciiname,alternatenames,latitude,longitude,fclass,fcode,country,cc2,
admin1,admin2,admin3,admin4,population,elevation,gtopo30,timezone,moddate)
FROM 'e:/data/geonames_allCountries/allCountries.txt' null as '';


COPY alternatename
(alternatenameid,geonameid,isoLanguage,alternateName,isPreferredName,isShortName,isColloquial,isHistoric)
FROM 'e:/data/geonames_allCountries/alternateNames.txt' null as '';


ALTER TABLE ONLY alternatename
    ADD CONSTRAINT pk_alternatenameid PRIMARY KEY (alternatenameid);
ALTER TABLE ONLY geoname
    ADD CONSTRAINT pk_geonameid PRIMARY KEY (geonameid);
ALTER TABLE ONLY alternatename
    ADD CONSTRAINT fk_geonameid FOREIGN KEY (geonameid) REFERENCES geoname(geonameid);


-- geo
ALTER TABLE geoname
  ADD COLUMN geog geography(Point,4326); 
UPDATE geoname
SET geog = ST_SetSRID(ST_Point(longitude,latitude),4326)::geography;


-- ALTER TABLE geoname 
--   ADD COLUMN geom geometry(Point,4326); 
-- UPDATE geoname
-- SET geom = ST_SetSRID(ST_Point(longitude,latitude),4326);


-- indicies
CREATE INDEX idx_geoname_geog ON geoname USING GIST (geog);
CLUSTER idx_geoname_geog on geoname;


-- CREATE INDEX index_alternatename_geonameid ON alternatename USING hash (geonameid);
VACCUM ANALYZE;




-- sample queries on geography
SELECT name, alternatenames, fclass, fcode
FROM geoname 
-- WHERE "geog" && ST_GeogFromText('POLYGON ((-33.4423828125 38.671875, -33.4423828125 65.390625, 32.8271484375 65.390625, 32.8271484375 38.671875, -33.4423828125 38.671875))')
WHERE "geog" && ST_Buffer(ST_GeogFromText('POINT(-122.7771 45.5427)'), 25000)
ORDER BY fclass;


SELECT *
FROM geoname 
-- WHERE "geog" && ST_GeogFromText('POLYGON ((-33.4423828125 38.671875, -33.4423828125 65.390625, 32.8271484375 65.390625, 32.8271484375 38.671875, -33.4423828125 38.671875))')
WHERE "geog" && ST_Buffer(ST_GeogFromText('POINT(-122.7771 45.5427)'), 500000)
AND fclass = 'P'
AND fcode = 'PPL'
ORDER BY population DESC;